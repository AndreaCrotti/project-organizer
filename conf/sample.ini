# some possible options we might want to have
# an url in in the form
# <type> <url> [profile]
# where the profile might give some more information about how to do things
# for example it might know that bitbucket does things in a way different than github

# TODO
# - see how to handle possible interconnected links between different projects
# - add some ways to declare more possible branches
# - the name of the protocol is not necessary unless it's HTTP
# - create some possible categories and common tags for the different projects
# - create a priority system to track the importance of each
# - when creating a new repository and its fork create the link to the original
#   project automatically, to make it easy to be kept up-to-date
#
# see how to declare dependencies:
#
# - add a linking mechanisms to bug and bug reports, and store in some
#   sort of databases the list of contributions made (bug
#   reports/patches sent etc etc)
#
# In theory the method to download things from the various CMS can be
# also be switched at run-time.
#

[default]
checkout = True
backup = True
private = False # can be shared or not
# script to run after a clone is done
post_clone_hook =
# script to run after a succesful update
post_update_hook =
# don't overwrite by default if something is already found
overwrite = False
# where to really place the project (and create a symlink here)
#TODO: make os-independent symlinks if possible
path = .

# bug_report = None

# link to the bug reporting mechanism this might also have a profile
# declared (trac/redmine...) so that we can modularise and automate
# the communication between elements

# declere under which conditions to download each of the different things
[profiles]
personal = all

[shadow]
url = svn://anonscm.debian.org/pkg-shadow/

[parsimonious]
url = git://github.com/erikrose/parsimonious.git

[configblue]
url = lp:configblue
desc = merge ConfigParser and optionparser
type = bzr

[openmirage]
url = git://github.com/avsm/mirage.git

[wicd]
url = lp:wicd
type = bzr

[hotwire]
url = http://hotwire-shell.googlecode.com/svn/trunk/
type = svn

[numba]
url = git://github.com/ContinuumIO/numba.git
desc = compiler for Python and NumPy

[pypy]
url = https://bitbucket.org/pypy/pypy
type = hg

[redminelib]
url = git://github.com/willkg/redminelib.git
desc = partial scraping of the information contained in Redmine

[gprof2dot]
url = https://code.google.com/p/jrfonseca.gprof2dot/
type = git

[virtualenv]
url = git://github.com/pypa/virtualenv.git

[gitflow]
url = git://github.com/nvie/gitflow.git

[nose]
url = git://github.com/nose-devs/nose.git

[ipython]
url = https://github.com/ipython/ipython

[pynocle]
url = https://code.google.com/p/pynocle/
type = hg

[pyflakes]
url = git://github.com/kevinw/pyflakes.git

[pydbgr]
url = http://pydbgr.googlecode.com/svn/trunk/

[pep8]
url = git://github.com/kevinw/pyflakes.git

[fabric]
url = https://github.com/fabric/fabric

[pudb]
url = http://git.tiker.net/trees/pudb.git

[d3js]
url = git://github.com/mbostock/d3.git
desc = amazing javascript library for cool animation / graphs

[pyrabbit]
url = git://github.com/bkjones/pyrabbit.git
desc = python interface to rabbitMQ, from Pycon US 2012

[pydev]
url = git://github.com/aptana/Pydev.git

[fishmonger]
url = https://bitbucket.org/ned/fishmonger
type = hg

[pfilesystem]
url = http://pyfilesystem.googlecode.com/svn/trunk/

[pythonscope]
url = lp:pythoscope
type = bzr

[sourcecodegen]
url = lp:sourcecodegen
type = bzr

[profilehooks]
url = http://mg.pov.lt/profilehooks/svn

[celery]
url = git://github.com/ask/celery.git

[monocle]
url = git://github.com/saucelabs/monocle.git

[snakefood]
url = https://hg.furius.ca/public/snakefood/

[pyzmq]
url = git://github.com/zeromq/pyzmq.git

[libzmq]
url = git://github.com/zeromq/libzmq.git

[conkeror]
url = git://repo.or.cz/conkeror.git

[rope]
url = https://bitbucket.org/agr/rope
type = hg

[ropemacs]
url = https://bitbucket.org/agr/ropemacs
type = hg

[buildbot]
url = git://github.com/buildbot/buildbot.git

[bitlbee]
url = http://code.bitlbee.org/bitlbee/
type = bzr

[scala]
url = http://lampsvn.epfl.ch/svn-repos/scala/scala/trunk

[redmine]
url = http://redmine.rubyforge.org/svn/branches/1.2-stable

[mailman]
url = lp:mailman
type = bzr

[hieroglyph]
url = git://github.com/nyergler/hieroglyph.git
desc = Sphinx extension to produce slides in HTML5

[scapy]
url = http://hg.secdev.org/scapy
type = hg

[scripts]
url = github:AndreaCrotti/scripts.git

[bash_conf]
# if the url is only on my hard disk it means is a private repository??
url = $HOME/Dropbox/bash_conf.git

[tox]
url = https://bitbucket.org/hpk42/tox
type = hg

[razz]
url = github:AndreaCrotti/razz.git

[waf]
type = git
url = https://code.google.com/p/waf/

[scons]
url = https://bitbucket.org/scons/scons
type = hg

[walkdir]
url = https://bitbucket.org/ncoghlan/walkdir
type = hg

[shell_command]
url = https://bitbucket.org/ncoghlan/shell_command
type = hg

[code-kata]
url = github:AndreaCrotti/code-kata.git

[logic]
url = github:AndreaCrotti/logic-truth-tables.git

[linux-kernel]
url = git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux-2.6.git

[pygit]
url = git://gitorious.org/pygit/mainline.git

[openpyxl]
url = https://bitbucket.org/ericgazoni/openpyxl
type = hg

[cmake]
url = git://cmake.org/cmake.git

[psutils]
url = http://psutil.googlecode.com/svn/trunk/

[pycallgraph]
# if set the project is a fork from another project
original =
url = github:AndreaCrotti/pycallgraph.git
auto_checkout = False

[ledger]
#TODO: the github.com -> github translation might appear later maybe
url = github:AndreaCrotti/ledger.git

# [photos]
# url = plain ~/Pictures

[objgraph]
url = lp:objgraph
type = bzr

[coverage]
url = https://andrea_crotti@bitbucket.org/andrea_crotti/coverage.py
original = https://andrea_crotti@bitbucket.org/ned/coveragepy
type = hg
#TODO: find a way to get the original project automatically

[python]
# this is the development version, checkout also some other versions
# automatically, probably better in different directories
url = http://hg.python.org/cpython

[hgapi]
url = https://bitbucket.org/haard/hgapi
type = hg

# these two are necessary to develop with the py2git
[py2git]
url = git://github.com/libgit2/pygit2.git

[libgit2]
url = git://github.com/libgit2/libgit2.git

[pygments]
url = https://bitbucket.org/birkenfeld/pygments-main
type = hg

[pacman]
url = git://projects.archlinux.org/pacman.git

[pylibalpm]
url = git://github.com/ornitorrincos/pyalpm.git

[akka]
url = git://github.com/jboner/akka.git

[regetron]
url = git://gitorious.org/regetron/regetron.git

[ocaml_batteries_included]
url = https://github.com/ocaml-batteries-team/batteries-included

# [emacs-conf]
# # ---------- emacs mode ----------
# # this is more complicated because there are many sub-modules the git
# # submodules can stay as they are, but all the other modules should be
# # declared as submodules
# path = my-emacs-conf

# # I can in theory set up
# [[scala-mode]]
# url = http://lampsvn.epfl.ch/svn-repos/scala/scala-tool-support/trunk/src/emacs/

# [[cedet]]
# url = bzr://cedet.bzr.sourceforge.net/bzrroot/cedet/code/trunk
# type = bzr

# [[tuaregmode]]
# url = svn://svn.forge.ocamlcore.org/svn/tuareg/trunk

# [[haskell-mode]]
# url = http://code.haskell.org/haskellmode-emacs
# type = darcs

# [[emacs-eclim]]
# url = git://github.com/senny/emacs-eclim.git

# [[ensime]]
# url = git://github.com/aemoncannon/ensime.git

# [[python-mode]]
# url = lp:python-mode
# type = bzr

# # ---------- end of emacs mode ----------
